Script started on 2023-03-09 20:28:52-05:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="172" LINES="9"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/08[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ cat NameTester.java 
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Alex Miller
 * Date: 3/9
 ************************************************************/

public class NameTester  
{
  public static void main(String[] args)
  {
    Name aName = new Name("John", "Paul", "Jones");

    assert aName.getFirst().equals("John") ;
    assert aName.getMiddle().equals("Paul") ;
    assert aName.getLast().equals("Jones") ;

    System.out.println(aName);
    assert aName.toString().equals("John Paul Jones");

      System.out.println("All tests passed!");
  }
}

// Replace this line with the declaration of class Name...
class Name
{
  private String myFirst, myMiddle, myLast;

  public Name(String first, String middle, String last)
  {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  }

  public String getFirst()
  {
    return myFirst;
  }

  public String getMiddle()
  {
    return myMiddle;
  }

  public String getLast()
  {
    return myLast;
  }

  public String toString()
  {
    return myFirst + ' ' + myMiddle + ' ' + myLast;
  }

  public void print() 
  {
  System.out.println( toString() );
  }
};


]0;ajm94@gold17: ~/Desktop/CS 214/Labs/08[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ make java
make: Nothing to be done for 'java'.
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/08[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ java -ed[Ka NameTester
John Paul Jones
All tests passed!
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/08[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ exit

Script done on 2023-03-09 20:29:13-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-13 19:53:29-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="182" LINES="10"]
]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Alex Miller
-- Date: 3/9
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  -- replace this line with the definition of NAME_SIZE
  NAME_SIZE : Integer := 8;

  -- replace this line with the definition of Name
  type Name is record myFirst, MyMiddle, MyLast : String(1..NAME_SIZE); end record;

  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  -- replace this line with the definition of Init()
  procedure Init(TheName: out Name; First, Middle, Last : in String) is begin TheName.MyFirst := First; TheName.MyMiddle := Middle; TheName.MyLast := Last; end Init;


  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  -- replace this line with the definition of getFirst()
  function getFirst(TheName : in Name) return String is begin return TheName.MyFirst; end getFirst;


  -- replace this line with the doc and def of getMiddle()
  function getMiddle(TheName: in Name) return String is begin return TheName.MyMiddle; end getMiddle;


  -- replace this line with the doc and def of getLast()
  function getLast(TheName: in Name) return String is begin return TheName.MyLast; end getLast;



  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  -- replace this line with the definition of getFullName()
  function getFullName(TheName: in Name) return String is begin return TheName.myFirst & TheName.MyMiddle & TheName.MyLast; end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  -- replace this line with the definition of Put()
  procedure Put(TheName: in Name) is begin Put(getFullName(TheName)); end Put; 


begin
  Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul     Jones   ", "getFullName() failed");

   Put(aName); New_line;
   Put("All tests passed!"); New_line;

end name_tester;

]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ make name_tester 
gnatmake name_tester -gnata
x86_64-linux-gnu-gcc-7 -c -gnata name_tester.adb
x86_64-linux-gnu-gnatbind-7 -x name_tester.ali
x86_64-linux-gnu-gnatlink-7 name_tester.ali
]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ ./ name[K[K[K[K[K[K/name_tester 
John    Paul    Jones   
All tests passed!
]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ exit

Script done on 2023-03-13 19:54:07-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-13 20:22:22-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="182" LINES="10"]
]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ cat nameTester.clj 
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Alex Miller
;;;; Date: 3/13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

; Replace this line with the definition of record-type Name
(defrecord Name [firstName middleName lastName])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with a definition of function make-Name
(defn make-Name [first mid last]
      (->Name first mid last)
   )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with the definition of getFirst()
(defn getFirst [^Name aName]
  (:firstName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with the definition of getMiddle()
(defn getMiddle [^Name aName]
  (:middleName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with the definition of getLast()
(defn getLast [^Name aName]
  (:lastName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with a definition of toString()
(defn toString [^Name aName]
  (str (:firstName aName) " " (:middleName aName) " " (:lastName aName) )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with a definition of printName()
(defn printName [^Name aName]
  (print (toString aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
      name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
      name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
      name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    (println "\nAll tests passed!\n")
  )
)

]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ clojure -m nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

All tests passed!

]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ exit

Script done on 2023-03-13 20:22:43-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-13 20:30:23-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="182" LINES="10"]
ca]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ cat NameTester.rb 
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Alex Miller
# Date: 3/13
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

# Replace this line with the declaration of class Name
class Name
   def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
   end
   attr_reader :first, :middle, :last

   def fullName()
      return @first + " " + @middle + " " + @last
   end

   def print()
      puts fullName()
      return fullName()
   end

end


def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"
   
   print "All tests passed!\n"
end

testName

]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ ruby NameTester.rb 
John Paul Jones
All tests passed!
]0;ajm94@gold18: ~/Desktop/CS 214/Labs/08[01;32majm94@gold18[00m:[01;34m~/Desktop/CS 214/Labs/08[00m$ exit

Script done on 2023-03-13 20:30:35-04:00 [COMMAND_EXIT_CODE="0"]
