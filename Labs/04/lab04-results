Script started on 2023-02-06 19:30:04-05:00 [TERM="xterm-256color" TTY="/dev/pts/6" COLUMNS="197" LINES="12"]
ca]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ cat LogTable.java 
/* LogTable.java displays a table of logarithms.
 *
 * Input: start, stop and increment, three doubles.
 * PRE: start < stop && increment > 0.
 * Output: A table of logarithms from start to stop,
 *         with increment as the step value.
 * Begun by: Nelesen, for CS 214 at Calvin College.
 * Completed by:
 ********************************************************/
import java.util.Scanner; 		// Get input

class LogTable{

  public static void main(String[] args){
    Scanner keyboard = new Scanner(System.in);
    System.out.println("To display a table of logarithms,");
    System.out.println("enter the start, stop and increment values: ");
    double start, stop, increment;
    start = keyboard.nextDouble();
    stop = keyboard.nextDouble();
    increment = keyboard.nextDouble();
    double count = start;

    //Replace this line with a while loop to generate the table of logs
    while(count <= stop){
      System.out.println("The logarithm of " + count + " is " + Math.log(count));
      count += increment;
    }

    for (double i = start; i < stop; i += increment){
      System.out.println("The logarithm of " + i + " is " + Math.log(i));
    }


    count = start;
    do {
      System.out.println("The logarithm of " + count + " is " + Math.log(count));
      count += increment;
    } while (count <= stop);

  }
}

]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ javac -deprecation LogTable.java 
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ java LogTable
To display a table of logarithms,
enter the start, stop and increment values: 
1
5
1
The logarithm of 1.0 is 0.0
The logarithm of 2.0 is 0.6931471805599453
The logarithm of 3.0 is 1.0986122886681098
The logarithm of 4.0 is 1.3862943611198906
The logarithm of 5.0 is 1.6094379124341003
The logarithm of 6.0 is 1.791759469228055
The logarithm of 6.0 is 1.791759469228055
The logarithm of 6.0 is 1.791759469228055
The logarithm of 6.0 is 1.791759469228055
The logarithm of 1.0 is 0.0
The logarithm of 2.0 is 0.6931471805599453
The logarithm of 3.0 is 1.0986122886681098
The logarithm of 4.0 is 1.3862943611198906
The logarithm of 5.0 is 1.6094379124341003
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ exit

Script done on 2023-02-06 19:31:09-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-06 19:57:18-05:00 [TERM="xterm-256color" TTY="/dev/pts/6" COLUMNS="197" LINES="12"]
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ cat log_table.adb
-- log_table.adb computes a table of logarithms.
--
-- Input: start, stop, increment, three reals.
-- Precondition: increment is positive.
-- Output: A table of logarithms beginning with log(start),
--         ending with log(stop), with intervals of increment.
--
-- Begun by: Prof. Adams, for CS 214 at Calvin College.
-- Completed by:
--------------------------------------------------------------

with Ada.Text_IO, Ada.Float_Text_IO;
use  Ada.Text_IO, Ada.Float_Text_IO;

with Ada.Numerics.Elementary_Functions;
use Ada.Numerics.Elementary_Functions;

procedure log_table is

   Start, Stop, Increment, Count, I, X: Float;

begin                                           -- Prompt for input
   Put_Line("To print a table of logarithms,");
   Put(" enter the start, stop, and increment values: ");
   Get(Start); Get(Stop); Get(Increment);
   

   -- Replace this line with a loop to generate the table of logs.
   Count := Start;
   loop
      Put("The logarithm of ");
      Put(Count);
      Put(" is ");
      Put( log( Count, 10.0 ) );
      New_Line;
      Count := Count + Increment;
      exit when (Count > Stop);
   end loop;

   for I in 0 .. Integer((Stop - Start) / Increment) loop
      X := Start + Float(I) * Increment;
      Put("The logarithm of ");
      Put(X);
      Put(" is ");
      Put(log(X, 10.0));
      New_Line;
   end loop;

   Count := Start;
   while Count <= Stop loop 
      Put("The logarithm of ");
      Put(Count);
      Put(" is ");
      Put(log(Count, 10.0));
      New_Line;
      Count := Count + Increment;
   end loop;

end log_table;

]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ cat log_table.adb[4Pjava LogTablecat log_table.adb[Kgnatmake log_table.adb 
gnatmake: "log_table" up to date.
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ ./log_table 
To print a table of logarithms,
 enter the start, stop, and increment values: 1
5
1
The logarithm of  1.00000E+00 is  0.00000E+00
The logarithm of  2.00000E+00 is  3.01030E-01
The logarithm of  3.00000E+00 is  4.77121E-01
The logarithm of  4.00000E+00 is  6.02060E-01
The logarithm of  5.00000E+00 is  6.98970E-01
The logarithm of  1.00000E+00 is  0.00000E+00
The logarithm of  2.00000E+00 is  3.01030E-01
The logarithm of  3.00000E+00 is  4.77121E-01
The logarithm of  4.00000E+00 is  6.02060E-01
The logarithm of  5.00000E+00 is  6.98970E-01
The logarithm of  1.00000E+00 is  0.00000E+00
The logarithm of  2.00000E+00 is  3.01030E-01
The logarithm of  3.00000E+00 is  4.77121E-01
The logarithm of  4.00000E+00 is  6.02060E-01
The logarithm of  5.00000E+00 is  6.98970E-01
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ exit

Script done on 2023-02-06 19:57:42-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-06 20:48:13-05:00 [TERM="xterm-256color" TTY="/dev/pts/6" COLUMNS="197" LINES="12"]
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ cat logTable.clj 
;;;; logTable.clj displays a table of logarithms.
;;;;
;;;; Input: start, stop and increment, three numbers.
;;;; Precondition: start < stop && increment > 0.
;;;; Output: A table of logarithms from start to stop,
;;;;          with interval of increment.
;;;;
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by:
;;;; Date:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns logTable)                                 ; name the program

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; displayLogTable() recursively generates the log-table.
;;; Receive: start the first value for the table;
;;;          stop, the last  value for the table;
;;;           step, the step value for the table;
;;; Precondition: start < stop && increment > 0.
;;; Output: The table of logs from start to stop, by step.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; direct-recursive version

; replace this line with the definition of displayLogTable().
(defn displayLogTable [start stop step]
(if (<= start stop)
    (do
      (printf "The logarithm of %f is %f\n" ;  print one line
                  start (Math/log10 start)
      )
      (recur (+ start step) stop step)
    )
  )
)


(defn displayLogTable2 [start stop step]
  (loop [i start]                           ; set i to start
    (when (<= i stop)                       ; if i <= stop:
      (printf "The logarithm of %f is %f\n" ;  print one line
                  i (Math/log10 i)
      )
      (recur (+ i step))                    ; recurse, i += step
    )
  )
)

(defn displayLogTable3 [start stop step]
  (if (<= start stop)                     ; if start <= stop:
    (do                                      ; do these two things:
      (printf "The logarithm of %f is %f\n"  ; - print one line
                  start (Math/log10 start)
      )
      (recur (+ start step) stop step)       ; - recurse, start+=step
    )
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; -main is a 'driver' for the displayLogTable() functions.
;;; Input: start, stop and increment.
;;; Output: The table of logarithms 
;;;          from start to stop by increment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn -main []
 (println "To display a table of logarithms,")
 (print " enter the start, stop, and increment values: ") (flush)
 (let
    [ start (double (read))
      stop (double (read))
      increment (double (read))
    ] 
    (println)
    (displayLogTable start stop increment) 
    (println)
    (displayLogTable2 start stop increment) 
    (println)
    (displayLogTable3 start stop increment) 
    (println)
 )
)

]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ clojure -m logTable.[K
To display a table of logarithms,
 enter the start, stop, and increment values: 1
5
0.5

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970

]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ exit

Script done on 2023-02-06 20:48:37-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-06 20:36:23-05:00 [TERM="xterm-256color" TTY="/dev/pts/6" COLUMNS="197" LINES="12"]
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ cat logTable.rb 
#! /usr/bin/ruby
# logTable.rb displays a table of logarithms
#
# Begun by: Prof. Adams, for CS 214 at Calvin College.
# Completed by:
#
# Input:  The start, stop and increment values
# Precondition: The start value is less than the stop value, 
#     and the increment is greater than 0
# Output: A table of logarithms from start to stop, with increment
#     as the step value


if __FILE__ == $0
   print "Enter the start value: "
#### ADD CODE HERE TO GET THESE VALUES AS NUMBERS
   start = gets.to_f
   print "Enter the stop value: "
####
   stop = gets.to_f
   print "Enter the increment value: "
####   
   step = gets.to_f   

#  Replace this line with a loop to display the log table 
   while start <= stop do
      puts "The log of " << start.to_s << " is "  << Math.log10(start).to_s
      start += step
   end
end

]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ cat logTable.rb [KRUBY [K[K[K[K[Kruby logTable.R[Krb 
Enter the start value: 1
Enter the stop value: 5
Enter the increment value: 1
The log of 1.0 is 0.0
The log of 2.0 is 0.3010299956639812
The log of 3.0 is 0.47712125471966244
The log of 4.0 is 0.6020599913279624
The log of 5.0 is 0.6989700043360189
]0;ajm94@gold29: ~/Desktop/CS 214/Labs/04[01;32majm94@gold29[00m:[01;34m~/Desktop/CS 214/Labs/04[00m$ exit

Script done on 2023-02-06 20:36:46-05:00 [COMMAND_EXIT_CODE="0"]
