Script started on 2023-02-09 20:17:53-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="186" LINES="12"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (+ 1 2 3 4 5)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(+ 1 2 3 4 5)
15
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-09 20:18:11-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-09 20:20:49-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="186" LINES="12"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (fn [ParameterList][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C FunctionBody)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(fn [ParameterList] FunctionBody)
[KSyntax error compiling at (REPL:1:1).
Unable to resolve symbol: FunctionBody in this context
user=> [Kuser=> [Kuser=> (fn [x][C[C[C (+ x x)[C[C[C[C[C[C[C )[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(fn [x] (+ x x) )
#object[user$eval138$fn__139 0x5328a9c1 "user$eval138$fn__139@5328a9c1"]
user=> [Kuser=> [Kuser=> (fn [x] (+ x x) )2)1)[C[C[C[C[C[C[C[C[K(fn [x] (+ x x) 21)
#object[user$eval142$fn__143 0x16fe9c29 "user$eval142$fn__143@16fe9c29"]
user=> [Kuser=> [Kuser=> ((fb[Kn [x y[[K][C[C[C[C[C (+ (* x x [K)[C[C[C[C[C[C[C (* y y)[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C3 4[K[K[K 3 4)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K((fn [x y] (+ (* x x) (* y y))) 3 4)
25
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-09 20:23:00-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-09 20:24:25-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="186" LINES="12"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (fn [a b c][C[C[C[C[C[C[C (max (Math/abs a)[C[C[C[C[C[C[C[C[C[C[C[C (Math/abs b)[C[C[C[C[C[C[C[C[C[C[C[C (MAt[K[Katg[Kh/abs c)[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(fn [a b c] (max (Math/abs a) (Math/abs b) (Math/abs c)))
[K#object[user$eval136$fn__137 0x5b3f3ba0 "user$eval136$fn__137@5b3f3ba0"]
user=> [Kuser=> [Kuser=> (fn [a b c] (max (Math/abs a) (Math/abs b) (Math/abs c))) )[C )[C[C )[1@1[C[C )[1@2[C[C )[1@-[1@5[C[C[C[C[C[C[C[K(fn [a b c] (max (Math/abs a) (Math/abs b) (Math/abs c)) 1 2 -5  )
#object[user$eval140$fn__141 0x1b32cd16 "user$eval140$fn__141@1b32cd16"]
user=> [Kuser=> [Kuser=> (fn [a b c] (max (Math/abs a) (Math/abs b) (Math/abs c)) 1 2 -5  )[1P)[C[C[C[C[C[C[C[K(fn [a b c] (max (Math/abs a) (Math/abs b) (Math/abs c)) 1 2 -5 )
#object[user$eval144$fn__145 0x5d39f2d8 "user$eval144$fn__145@5d39f2d8"]
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-09 20:25:40-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-13 19:20:01-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="12"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (fn [x y z][C[C[C[C[C[C[C (([K+ x y z)[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(fn [x y z] (+ x y z))
[K#object[user$eval136$fn__137 0x5183d589 "user$eval136$fn__137@5183d589"]
user=> [Kuser=> [Kuser=> (fn [x][C[C[C (nil? x)[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(fn [x] (nil? x))
#object[user$eval140$fn__141 0x4d4960c8 "user$eval140$fn__141@4d4960c8"]
user=> [Kuser=> [Kuser=> (fn [][C[C 17.2)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(fn [] 17.2)
#object[user$eval144$fn__145 0x47c64cfe "user$eval144$fn__145@47c64cfe"]
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-13 19:21:12-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-13 19:22:40-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="12"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (def triple (fn [x][C[C[C (* x 3)[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(def triple (fn [x] (* x 3)))
[K#'user/triple
user=> [Kuser=> [Kuser=> (triple 4)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(triple 4)
12
user=> [Kuser=> [Kuser=> defn[K[K[K[K(defn triple [x][C[C[C ( [K([K* x 3)[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(defn triple [x] (* x 3))
#'user/triple
user=> [Kuser=> [Kuser=> (#(* % #[K3)[C[C[C[C[C[C[C 4)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(#(* % 3) 4)
12
user=> [Kuser=> [Kuser=> (def sum2Squars[K[K[Kares #(+ (* %1 %1)[C[C[C[C[C[C[C[C[C (* %2 %2)[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(def sum2Squares #(+ (* %1 %1) (* %2 %2)))
#'user/sum2Squares
user=> [Kuser=> [Kuser=> (sum2Squares 3 4)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(sum2Squares 3 4)
25
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-13 19:25:49-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-13 19:26:54-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="12"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (map inc [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map inc [1 2 3 4])
(2 3 4 5)
user=> [Kuser=> [Kuser=> (map - [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map - [1 2 3 4])
(-1 -2 -3 -4)
user=> [Kuser=> [Kuser=> (map - [1 2 3 4][C[C[C[C[C[C[C[C[C [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map - [1 2 3 4] [1 2 3 4])
(0 0 0 0)
user=> [Kuser=> [Kuser=> (map even? [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map even? [1 2 3 4])
(false true false true)
user=> [Kuser=> [Kuser=> (map str ["a" "b" "c"][C[C[C[C[C[C[C[C[C[C[C[C[C ["A" "B" "C"][C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map str ["a" "b" "c"] ["A" "B" "C"])
("aA" "bB" "cC")
user=> [Kuser=> [Kuser=>  (map count [[11][C[C[C[C [11 22][C[C[C[C[C[C[C [11 22 33][C[C[C[C[C[C[C[C[C[C][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K (map count [[11] [11 22] [11 22 33]])
(1 2 3)
user=> [Kuser=> [Kuser=> (map + [1 2 3 4][C[C[C[C[C[C[C[C[C [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map + [1 2 3 4] [1 2 3 4])
(2 4 6 8)
user=> [Kuser=> [Kuser=> (map * [1 2 3 4][C[C[C[C[C[C[C[C[C [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map * [1 2 3 4] [1 2 3 4])
(1 4 9 16)
user=> [Kuser=> [Kuser=>  (Math/abs -3)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K (Math/abs -3)
3
user=> [Kuser=> [Kuser=> (map Math/abs [-1 2 -3 4 -5][C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map Math/abs [-1 2 -3 4 -5])
Syntax error compiling at (REPL:1:1).
Unable to find static field: abs in class java.lang.Math
user=> [Kuser=> [Kuser=> (map (fn [x][C[C[C (if (< x 0)[C[C[C[C[C[C[C (- x)[C[C[C[C[C x)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C [-1 2 -3 4 -5][C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5])
[K(1 2 3 4 5)
user=> [Kuser=> [Kuser=> (defn subtract-n [n sequence][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   [K(defn subtract-n [n sequence]
[K   (map (fn [x][C[C[C (- x n)[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C sequence)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   )[K   (map (fn [x] (- x n)) sequence)
[K   )[K[K   )

#'user/subtract-n
user=> user=> [Kuser=> user=> [Kuser=> user=> (subtract-n 2 [5 6 7 8][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(subtract-n 2 [5 6 7 8])
(3 4 5 6)
user=> [Kuser=> [Kuser=> (filter odd? [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter odd? [1 2 3 4])
(1 3)
user=> [Kuser=> [Kuser=> (filter even? [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter even? [1 2 3 4])
(2 4)
user=> [Kuser=> [Kuser=>  (filter neg? [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K (filter neg? [1 2 3 4])
()
user=> [Kuser=> [Kuser=> (filter neg? [-1 1 -2 2 -3 3][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter neg? [-1 1 -2 2 -3 3])
(-1 -2 -3)
user=> [Kuser=> [Kuser=> (filter pos?  [-1 1 -2 2 -3 3][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> [Kuser=> [Kuser=> (filter pos?  [-1 1 -2 2 -3 3][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> [Kuser=> [Kuser=> (filter pos?  [-1 1 -2 2 -3 3][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> [Kuser=> [Kuser=> (filter pos?  [-1 1 -2 2 -3 3][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> [Kuser=> [Kuser=> (filter pos?  [-1 1 -2 2 -3 3][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> [Kuser=> [Kuser=>  (filter (fn [x][C[C[C (and (pos? x)[C[C[C[C[C[C[C[C (even? x)[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C [-1 1 -2 2 -3 3 -4 4][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K (filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4])
(2 4)
user=> [Kuser=> [Kuser=> (filter (fn [x][C[C[C (and (pos? x)[C[C[C[C[C[C[C[C (even? x)[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C [-1 1 -2 2 -3 3 -4 4][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P[1P[1P[1@n[1@e[1@g[C[C[C[C[C[C[C[C[C[1P[1P[1P[C[1P[1@o[1@d[1@d[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(filter (fn [x] (and (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])
(-1 -3)
user=> [Kuser=> [Kuser=> (filter (fn [x] (and (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])[1P[1P[1P[1@o[1@r[C[C[C[C[C[C[C[K(filter (fn [x] (or (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])
(-1 1 -2 -3 3 -4)
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-13 19:32:11-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-13 19:34:49-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="12"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn negate [x][C[C[C (* x -1)[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(defn negate [x] (* x -1))
[K#'user/negate
user=> [Kuser=> [Kuser=> (negate [-1 2 -3][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(negate [-1 2 -3])
Execution error (ClassCastException) at user/negate (REPL:1).
class clojure.lang.PersistentVector cannot be cast to class java.lang.Number (clojure.lang.PersistentVector is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')
user=> [Kuser=> [Kuser=> (negate [-1 2 -3])[C[C[C[C[C[C[C[Cdefn negate [x] (* x -1))[1P1))[1P1))[1P1))[1P1))[C[1P)) ))0)) ))x)) ))[1P[1@-[C[C[C[C[C[1P))[C[C[C[C[C[C[C[C[C[K(defn negate [x] (- 0 x))
#'user/negate
user=> [Kuser=> [Kuser=> (defn negate [x] (- 0 x))[C[C[C[C[C[C[C[C[7Pnegate [-1 2 -3])[C[C[C[C[C[C[C[K(negate [-1 2 -3])
Execution error (ClassCastException) at user/negate (REPL:1).
class clojure.lang.PersistentVector cannot be cast to class java.lang.Number (clojure.lang.PersistentVector is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')
user=> [Kuser=> [Kuser=> (negate [-1 2 -3])[C[C[C[C[C[C[C[Cdefn negate [x] (- 0 x))[C[C[C[C[C[C[C[C[7Pnegate [-1 2 -3])[C[C[C[C[C[C[C[K(defn negate [x sequence][C[C[C[C[C[C[C[C[C[C[C[C (map (fn [x][C[C[C 9[K(- 0 x [K)[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C sequence)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(defn negate [x sequence] (map (fn [x] (- 0 x)) sequence))
#'user/negate
user=> [Kuser=> [Kuser=> (defn negate [x sequence] (map (fn [x] (- 0 x)) sequence))[C[C[C[C[C[C[C[Cnegate [-1 2 -3])[K[C[C[C[C[C[C[C[K(negate [-1 2 -3])
Execution error (ArityException) at user/eval145 (REPL:1).
Wrong number of args (1) passed to: user/negate
user=> [Kuser=> [Kuser=> (negate [-1 2 -3])[C[C[C[C[C[C[C[Cdefn negate [x sequence] (map (fn [x] (- 0 x)) sequence))[C[1P[1P[1P[C[C[C[C[C[C[C[Cnegate [-1 2 -3])[K[C[C[C[C[C[C[C[K
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-13 19:41:29-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-13 19:43:13-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="33"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (reduce + [1 2 3][C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce + [1 2 3])
6
user=> [Kuser=> [Kuser=> (reduce + '(1 2 3)[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[K(reduce + '(1 2 3))
6
user=> [Kuser=> [Kuser=> (reduce max [1 2 3][C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce max [1 2 3])
3
user=> [Kuser=> [Kuser=> (reduce conj [1 2 3][C[C[C[C[C[C[C [4 5 6][C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce conj [1 2 3] [4 5 6])
[1 2 3 4 5 6]
user=> [Kuser=> [Kuser=> (reduce + [1 2 3 4 5][C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce + [1 2 3 4 5])
15
user=> [Kuser=> [Kuser=> (reduce + 1 [2 3 4 5][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce + 1 [2 3 4 5])
15
user=> [Kuser=> [Kuser=> (reduce + 1 '(2 3 4 5)[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[K(reduce + 1 '(2 3 4 5))
15
user=> [Kuser=> [Kuser=> (reduce max 5 [4 3 2 1][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce max 5 [4 3 2 1])
5
user=> [Kuser=> [Kuser=> (reduce bit-or [1 2 3 4][C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce bit-or [1 2 3 4])
7
user=> [Kuser=> [Kuser=> (reduce str ["a" "b" "c"][C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce str ["a" "b" "c"])
"abc"
user=> [Kuser=> [Kuser=> (reduce + 1 2 [3 4 5][C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(reduce + 1 2 [3 4 5])
Execution error (ArityException) at user/eval21 (REPL:1).
Wrong number of args (4) passed to: clojure.core/reduce
user=> [Kuser=> [Kuser=> (reduce + 1 '(2 3 4)[C[C[C[C[C[C[C 5)[C[C[C[C[C[C[C[K(reduce + 1 '(2 3 4) 5)
Execution error (ArityException) at user/eval23 (REPL:1).
Wrong number of args (4) passed to: clojure.core/reduce
user=> [Kuser=> [Kuser=> (defn csv [seq][C[C[C[C[C[C[C[C[C[C[C[C[K[K      (reduce (fn [a b][C[C[C[C[C[K(defn csv [seq]
[K      (reduce (fn [a b] (str a "," b)[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C seq)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   )[K      (reduce (fn [a b] (str a "," b)) seq)
[K   )[K   )
[K#'user/csv
user=> [Kuser=> [Kuser=> (csv [11 22 33][C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(csv [11 22 33])
"11,22,33"
user=> [Kuser=> [Kuser=> (defn totalItems [seqOfSeqs][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   (reduce + (map cou[K(defn totalItems [seqOfSeqs]
[K   (reduce + (map count seqOfSeqs)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K  )[K   (reduce + (map count seqOfSeqs))
[K  )[K  )
#'user/totalItems
user=> [Kuser=> [Kuser=> 
user=> [Kuser=> [Kuser=> (totalItems [["Ann"][C[C[C[C[C[C[C ["Bob" "Chris"][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C ["Dan" "Eve" "Fred"][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(totalItems [["Ann"] ["Bob" "Chris"] ["Dan" "Eve" "Fred"]])
6
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-13 19:45:33-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-13 19:47:24-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="33"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn sumSquares * [K[K[sequence][C[C[C[C[C[C[C[C[C[C (reduce * [K[K(fn[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Knums][C[C[C[C[C[C (reduce + (map #(* % %)[C[C[C[C[C[C[C nums)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(defn sumSquares [nums] (reduce + (map #(* % %) nums)))
[K#'user/sumSquares
user=> [Kuser=> [Kuser=> (sumSquares '(1 2 3)[C[C[C[C[C[C[C) [C[C[C[C[C[C[C[K(sumSquares '(1 2 3)) 
14
user=> [Kuser=> [Kuser=> (sumSquares '(1 2 3 4 5)[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[K(sumSquares '(1 2 3 4 5))
55
user=> [Kuser=> [Kuser=> (sumSquares [-1 -2 -3 0 1][C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(sumSquares [-1 -2 -3 0 1])
15
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-13 19:54:17-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-02-13 19:54:28-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="33"]
]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ clojure
[KClojure 1.10.1
[Kuser=> [Kuser=> [Kuser=> (defn incMaker [incValue][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   (fn [x][C[C[C[K(defn incMaker [incValue]
[K   (fn [x][K[K     (+ x inc[K   (fn [x]
[K     (+ x incValue)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   )[K     (+ x incValue)
[K   )[K[K)[K   )
[K)[K)
[K#'user/incMaker
user=> [Kuser=> [Kuser=> (defn incMaker [incValue][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   #(+ % incValue)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(defn incMaker [incValue]
[K   #(+ % incValue)[K[K)[K   #(+ % incValue)
[K)[K)
#'user/incMaker
user=> [Kuser=> [Kuser=> (def inc5 (incMaker 5)[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(def inc5 (incMaker 5))
#'user/inc5
user=> [Kuser=> [Kuser=> (defn greetingBuilder [greeting][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   (fn [visitor][C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(defn greetingBuilder [greeting]
[K   (fn [visitor][K   (fn [visitor]
[K      (str greeting ", " visitor "!")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K   )[K      (str greeting ", " visitor "!")
[K   )[K[K)[K   )
[K)[K)
#'user/greetingBuilder
user=> [Kuser=> [Kuser=> (def csGreeting (greetingBuilder "Welcome to CS 214")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(def csGreeting (greetingBuilder "Welcome to CS 214"))
#'user/csGreeting
user=> [Kuser=> [Kuser=> (def englishGreeting (greetingBuilder "Hello")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(def englishGreeting (greetingBuilder "Hello"))
#'user/englishGreeting
user=> [Kuser=> [Kuser=> (def frenchGreeting (greetingBuilder "Bonjour")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(def frenchGreeting (greetingBuilder "Bonjour"))
#'user/frenchGreeting
user=> [Kuser=> [Kuser=> (csGreeting "Ann")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(csGreeting "Ann")
"Welcome to CS 214, Ann!"
user=> [Kuser=> [Kuser=> (englishGreeting "Chris")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(englishGreeting "Chris")
"Hello, Chris!"
user=> [Kuser=> [Kuser=> (frenchGreeting "Chris")[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K(frenchGreeting "Chris")
"Bonjour, Chris!"
user=> [Kuser=> [Kuser=> 
[K]0;ajm94@gold17: ~/Desktop/CS 214/Labs/05[01;32majm94@gold17[00m:[01;34m~/Desktop/CS 214/Labs/05[00m$ exit

Script done on 2023-02-13 19:56:05-05:00 [COMMAND_EXIT_CODE="0"]
