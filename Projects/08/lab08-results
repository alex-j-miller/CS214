Script started on 2023-03-16 19:47:31-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="186" LINES="9"]
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ cat NameTester.java 
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Alex Miller
 * Date: 3/16
 ************************************************************/
import java.util.Scanner;

public class NameTester  
{
  public static void main(String[] args)
  {
    Name aName = new Name("John", "Paul", "Jones");

    assert aName.getFirst().equals("John") ;
    assert aName.getMiddle().equals("Paul") ;
    assert aName.getLast().equals("Jones") ;

    System.out.println(aName);
    assert aName.toString().equals("John Paul Jones");

    assert aName.lfmi().equals("Jones, John P.");

    aName.setFirst("idk");
    aName.setMiddle("who knows");
    aName.setLast("test");;

    assert aName.getFirst().equals("idk") ;
    assert aName.getMiddle().equals("who knows") ;
    assert aName.getLast().equals("test") ;

    System.out.println("All tests passed!");
  }
}

// Replace this line with the declaration of class Name...
class Name
{
  private String myFirst, myMiddle, myLast;

  public Name(String first, String middle, String last)
  {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  }

  public String getFirst()
  {
    return myFirst;
  }

  public String getMiddle()
  {
    return myMiddle;
  }

  public String getLast()
  {
    return myLast;
  }

  public String toString()
  {
    return myFirst + ' ' + myMiddle + ' ' + myLast;
  }

  public void print() 
  {
  System.out.println( toString() );
  }

  public void setFirst(String aFirst)
  {
    myFirst = aFirst;
  }

  public void setMiddle(String aMiddle)
  {
    myMiddle = aMiddle;
  }

  public void setLast(String aLast)
  {
    myLast = aLast;
  }

  public String lfmi()
  {
    return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";
  }

  public void read()
  {
    Scanner scanner = new Scanner(System.in);
    myFirst = scanner.nextLine();
    myMiddle = scanner.nextLine();
    myLast = scanner.nextLine();

  }


};


]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ javac -deprecation NameTester.java 
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ java NameTester
John Paul Jones
All tests passed!
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ exit

Script done on 2023-03-16 19:47:55-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-16 20:58:06-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="15"]
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ cat name_tester.adb 
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Alex Miller
-- Date: 3/9
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  -- replace this line with the definition of NAME_SIZE
  NAME_SIZE : Integer := 8;

  -- replace this line with the definition of Name
  type Name is record myFirst, MyMiddle, MyLast : String(1..NAME_SIZE); end record;

  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  -- replace this line with the definition of Init()
  procedure Init(TheName: out Name; First, Middle, Last : in String) is begin TheName.MyFirst := First; TheName.MyMiddle := Middle; TheName.MyLast := Last; end Init;


  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  -- replace this line with the definition of getFirst()
  function getFirst(TheName : in Name) return String is begin return TheName.MyFirst; end getFirst;


  -- replace this line with the doc and def of getMiddle()
  function getMiddle(TheName: in Name) return String is begin return TheName.MyMiddle; end getMiddle;


  -- replace this line with the doc and def of getLast()
  function getLast(TheName: in Name) return String is begin return TheName.MyLast; end getLast;


  procedure setFirst(TheName : out Name ; aFirst: in String) is begin TheName.myFirst := aFirst; end setFirst;

  procedure setMiddle(TheName : out Name ; aMiddle: in String) is begin TheName.myMiddle := aMiddle; end setMiddle;

  procedure setLast(TheName : out Name ; aLast: in String) is begin TheName.MyLast := aLast; end setLast; 

  function lfmi(TheName: in Name) return String is begin return TheName.MyLast & ", " & TheName.myFirst & " " & TheName.MyMiddle(1) & "."; end lfmi;

  procedure read(TheName: out Name) is begin Get(TheName.myFirst); Get(TheName.MyMiddle); Get(TheName.MyLast); end read;



  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  -- replace this line with the definition of getFullName()
  function getFullName(TheName: in Name) return String is begin return TheName.myFirst & TheName.MyMiddle & TheName.MyLast; end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  -- replace this line with the definition of Put()
  procedure Put(TheName: in Name) is begin Put(getFullName(TheName)); end Put; 


begin
  Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul    Jones   ", "getFullName() failed");

   
   setFirst(aName, "Bobby   ");
   setMiddle(aName, "Billy   ");
   setLast(aName, "Joe     ");
   pragma Assert( lfmi(aName) = "Joe     , Bobby    B.", "lfmi() faild");

   Put(aName); New_line;
   Put("All tests passed!"); New_line;

end name_tester;

]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ gnatmake name_tester.adb 
x86_64-linux-gnu-gcc-7 -c name_tester.adb
x86_64-linux-gnu-gnatbind-7 -x name_tester.ali
x86_64-linux-gnu-gnatlink-7 name_tester.ali
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ ./name_tester 
Bobby   Billy   Joe     
All tests passed!
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ exit

Script done on 2023-03-16 20:58:30-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-27 19:38:28-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="186" LINES="9"]
]0;ajm94@gold08: ~/Desktop/CS 214/Projects/08[01;32majm94@gold08[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ gnatmake name_tester.adb [Kclojure -m nameTester.clj [K[K[K[K[K
WARNING: read already refers to: #'clojure.core/read in namespace: nameTester, being replaced by: #'nameTester/read

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones


All tests passed!

]0;ajm94@gold08: ~/Desktop/CS 214/Projects/08[01;32majm94@gold08[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ exit

Script done on 2023-03-27 19:38:47-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2023-03-16 21:00:59-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="15"]
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ cat NameTester.rb 
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Alex Miller
# Date: 3/13
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

# Replace this line with the declaration of class Name
class Name
   def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
   end
   attr_reader :first, :middle, :last

   def fullName()
      return @first + " " + @middle + " " + @last
   end

   def print()
      puts fullName()
      return fullName()
   end

   def setFirst(aFirst)
      @first = aFirst
   end

   def setMiddle(aMiddle)
      @middle = aMiddle
   end

   def SetLast(aLast)
      @last = aLast
   end

   def lfmi(name)
      return last + ", " + first + " " + middle[0] + "."
   end

   def read()
      first = gets.chomp
      middle = gets.chomp
      last = gets.chomp
   end

end


def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"

   name.setFirst("Billy")
   assert name.first == "Billy", "first failed"
   name.setMiddle("Bobby")
   assert name.middle == "Bobby", "middle failed"
   name.SetLast("Brown")
   assert name.last == "Brown", "last failed"
   
   print "All tests passed!\n"
end

testName

]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ ruby NameTester.rb 
John Paul Jones
All tests passed!
]0;ajm94@gold06: ~/Desktop/CS 214/Projects/08[01;32majm94@gold06[00m:[01;34m~/Desktop/CS 214/Projects/08[00m$ exit

Script done on 2023-03-16 21:01:12-04:00 [COMMAND_EXIT_CODE="0"]
